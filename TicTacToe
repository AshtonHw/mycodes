import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;
import java.util.Scanner;

public class Tictactoe {

	static ArrayList<Integer> PlayerPositions = new ArrayList<Integer>();
	static ArrayList<Integer> cpuPositions = new ArrayList<Integer>();

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		char[][] GameBoard = { { ' ', '|', ' ', '|', ' ' }, 
				               { '-', '+', '-', '+', '-' }, 
				               { ' ', '|', ' ', '|', ' ' },
				               { '-', '+', '-', '+', '-' },
				               { ' ', '|', ' ', '|', ' ' } };

		printGameBoard(GameBoard);

		while (true) {
			Scanner scan = new Scanner(System.in);

			System.out.println("Enter your Placement (1-9): ");

			int PlayerPos = scan.nextInt();
			while (PlayerPositions.contains(PlayerPos) || cpuPositions.contains(PlayerPositions)) {
				System.out.println("Position Taken. Enter a Correct Postion");
				PlayerPos = scan.nextInt();
			}

			placePiece(GameBoard, PlayerPos, "player");

			String result = checkWinner();

			if (result.length() > 0) {
				System.out.println(result);
				break;
			}

			Random rand = new Random();

			int cpuPos = rand.nextInt(9) + 1;
			while (PlayerPositions.contains(cpuPos) || cpuPositions.contains(cpuPos)) {

				cpuPos = rand.nextInt(9) + 1;
			}

			placePiece(GameBoard, cpuPos, "cpu");

			printGameBoard(GameBoard);

			result = checkWinner();
			if (result.length() > 0) {
				System.out.println(result);
				break;

			}

		}

	}

	public static void printGameBoard(char[][] GameBoard) {
		for (char[] row : GameBoard) {
			for (char c : row) {
				System.out.print(c);
			}
			System.out.println();
		}
	}

	public static void placePiece(char[][] GameBoard, int pos, String user) {

		char symbol = ' ';

		if (user.equals("player")) {
			symbol = 'X';
			PlayerPositions.add(pos);
		} else if (user.equals("cpu")) {
			symbol = 'O';
			cpuPositions.add(pos);
		}

		switch (pos) {
		case 1:
			GameBoard[0][0] = symbol;
			break;
		case 2:
			GameBoard[0][2] = symbol;
			break;
		case 3:
			GameBoard[0][4] = symbol;
			break;
		case 4:
			GameBoard[2][0] = symbol;
			break;
		case 5:
			GameBoard[2][2] = symbol;
			break;
		case 6:
			GameBoard[2][4] = symbol;
			break;
		case 7:
			GameBoard[4][0] = symbol;
			break;
		case 8:
			GameBoard[4][2] = symbol;
			break;
		case 9:
			GameBoard[4][4] = symbol;
			break;
		default:
			break;
		}
	}

	public static String checkWinner() {

		List topRow = Arrays.asList(1, 2, 3);
		List middleRow = Arrays.asList(4, 5, 6);
		List bottomRow = Arrays.asList(7, 8, 9);
		List leftCol = Arrays.asList(1, 4, 7);
		List midCol = Arrays.asList(2, 5, 8);
		List rightCol = Arrays.asList(3, 6, 9);
		List cross1 = Arrays.asList(1, 5, 9);
		List cross2 = Arrays.asList(7, 5, 3);

		List<List> winning = new ArrayList<List>();
		winning.add(topRow);
		winning.add(middleRow);
		winning.add(bottomRow);
		winning.add(leftCol);
		winning.add(midCol);
		winning.add(rightCol);
		winning.add(cross1);
		winning.add(cross2);

		for (List l : winning) {
			if (PlayerPositions.containsAll(l)) {
				return "Congrats My Boy you've won";
			} else if (cpuPositions.containsAll(l)) {
				return "Sorry You Lose, Loser";
			} else if (PlayerPositions.size() + cpuPositions.size() == 9) {
				return "TIE!";
			}
		}

		return "";
	}

}
